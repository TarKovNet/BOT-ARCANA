import logging
try:
    import openai
except ImportError:
    openai = None
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ChatMemberHandler, CallbackContext
from database import add_user

# ========== 1. –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–ì–Ü–ù–ì–£ ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)



async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    add_user(user.id, user.first_name, user.last_name, user.username)
    
    await update.message.reply_text(WELCOME_TEXT)
    return await show_main_menu(update, context)

async def new_user(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    for member in update.chat_member.new_chat_members:
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {member.first_name}!\n\n"
            "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —É —Å–≤—ñ—Ç—ñ –µ–∑–æ—Ç–µ—Ä–∏–∫–∏. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!"
        )
        await update.message.reply_text(welcome_text)

# ========== 2. –¢–û–ö–ï–ù–ò ==========
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()

# –ó—á–∏—Ç—É—î–º–æ —Ç–æ–∫–µ–Ω–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GPT_TOKEN = os.getenv("GPT_TOKEN")
app = ApplicationBuilder().token(BOT_TOKEN).build()
openai.api_key = GPT_TOKEN  # üîπ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ API-–∫–ª—é—á –¥–ª—è OpenAI

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω —ñ—Å–Ω—É—î
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ —É —Ñ–∞–π–ª .env!")

if not GPT_TOKEN:
    raise ValueError("‚ùå GPT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ —É —Ñ–∞–π–ª .env!")

# ========== 3. –°–¢–ê–ù–ò –î–õ–Ø CONVERSATIONHANDLER ==========


app.add_handler(ChatMemberHandler(new_user, ChatMemberHandler.CHAT_MEMBER))

(
    MAIN_MENU,
    NUMEROLOGY_MENU,
    ASTROLOGY_MENU,
    ESOTERICS_MENU,
    MAGIC_MENU,
    TOOLS_MENU,
    ENTER_DATA_STATE
) = range(7)

# ========== 4. –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ù–£–ú–ï–†–û–õ–û–ì–Ü–á (–ö–†–ï–ê–¢–ò–í–ù–ò–ô –°–¢–ò–õ–¨) ==========
async def handle_numerology_data(user_input: str) -> str:
    """
    –§–æ—Ä–º—É—î –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é), 
    –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º, –±–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π.
    """
    system_message = (
        "–¢–∏ ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥, —è–∫–∏–π –ø–æ—è—Å–Ω—é—î —Å—É—Ç—å –¥–∞—Ç –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–∏ —ñ–º–µ–Ω "
        "—É –ø—Ä–æ—Å—Ç—ñ–π —ñ –Ω–∞–¥–∏—Ö–∞—é—á—ñ–π —Ñ–æ—Ä–º—ñ. –ù–µ –∑–≥–∞–¥—É–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç—ñ–≤, "
        "–Ω–µ –ø–∏—à–∏ —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å, –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Å—É–º–æ–≤—É–π —Ç–∞ –Ω–∞–¥–∏—Ö–∞–π."
    )
    user_prompt = (
        f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω—É–º–µ—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –¥–∞–Ω—ñ: {user_input}.\n"
        "–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–π –æ–ø–∏—Å —ñ–∑ –µ–º–æ–¥–∑—ñ —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –î–µ—Ç–∞–ª—ñ: {e}"

# ========== 5. –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á "–ó–ê–ì–õ–£–®–ö–ò" (–ó–ê –ë–ê–ñ–ê–ù–ù–Ø–ú –û–ù–û–í–õ–Æ–ô–¢–ï –¢–ê–ö –°–ê–ú–û) ==========
# ========== 5. –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ë–†–û–ë–ö–ò –î–ê–ù–ò–• ==========
async def handle_astrology_data(user_input: str) -> str:
    """
    –ö—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    system_message = (
        "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥, —è–∫–∏–π –ø–æ—è—Å–Ω—é—î –≤–ø–ª–∏–≤ –∑—ñ—Ä–æ–∫ –Ω–∞ –ª—é–¥–∏–Ω—É "
        "—É –ø—Ä–æ—Å—Ç—ñ–π, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—ñ–π —Ñ–æ—Ä–º—ñ. –£–Ω–∏–∫–∞–π —Å–∫–ª–∞–¥–Ω–∏—Ö —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤, "
        "–ø–æ–¥–∞–≤–∞–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ —Ü—ñ–∫–∞–≤–æ—é –¥–ª—è –±—É–¥—å-–∫–æ–≥–æ."
    )
    user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –¥–∞–Ω—ñ: {user_input}.\n–°—Ç–≤–æ—Ä–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–π –æ–ø–∏—Å —ñ–∑ –µ–º–æ–¥–∑—ñ."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –î–µ—Ç–∞–ª—ñ: {e}"


async def handle_esoterics_data(user_input: str) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î –µ–∑–æ—Ç–µ—Ä–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    system_message = (
        "–¢–∏ ‚Äî –µ–∑–æ—Ç–µ—Ä–∏—á–Ω–∏–π –≥—ñ–¥, —è–∫–∏–π –ø–æ—è—Å–Ω—é—î –º—ñ—Å—Ç–∏—á–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏ –∂–∏—Ç—Ç—è "
        "—É –¥–æ—Å—Ç—É–ø–Ω—ñ–π —Ç–∞ –Ω–∞–¥–∏—Ö–∞—é—á—ñ–π —Ñ–æ—Ä–º—ñ. –£–Ω–∏–∫–∞–π —Å–∫–ª–∞–¥–Ω–æ—ó —Ç–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—ó, "
        "–ø–æ–¥–∞–≤–∞–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è—Å–∫—Ä–∞–≤–æ —Ç–∞ –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º."
    )
    user_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –µ–∑–æ—Ç–µ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ: {user_input}.\n–°—Ç–≤–æ—Ä–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–π –æ–ø–∏—Å —ñ–∑ –µ–º–æ–¥–∑—ñ."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –î–µ—Ç–∞–ª—ñ: {e}"


async def handle_magic_data(user_input: str) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î –º—ñ—Å—Ç–∏—á–Ω–∏–π –æ–ø–∏—Å –º–∞–≥—ñ—á–Ω–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.
    """
    system_message = (
        "–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç —É –º–∞–≥—ñ—ó, —è–∫–∏–π –ø—Ä–æ—Å—Ç–æ —ñ –∑–∞—Ö–æ–ø–ª–∏–≤–æ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î –ø—Ä–æ —Ä–∏—Ç—É–∞–ª–∏, "
        "–µ–Ω–µ—Ä–≥—ñ—ó —Ç–∞ —Ç–∞–ª—ñ—Å–º–∞–Ω–∏. –°—Ç–≤–æ—Ä–∏ –º–∞–≥—ñ—á–Ω–∏–π –æ–ø–∏—Å, —â–æ –Ω–∞–¥–∏—Ö–Ω–µ —á–∏—Ç–∞—á–∞."
    )
    user_prompt = f"–û–ø–∏—à–∏ –º–∞–≥—ñ—á–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑: {user_input}.\n–î–æ–¥–∞–π —Ç—Ä–æ—Ö–∏ —Ç–∞—î–º–Ω–∏—á–æ—Å—Ç—ñ –π –µ–º–æ–¥–∑—ñ."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –î–µ—Ç–∞–ª—ñ: {e}"


async def handle_tools_data(user_input: str) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –µ–∑–æ—Ç–µ—Ä–∏—á–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤.
    """
    system_message = (
        "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä –µ–∑–æ—Ç–µ—Ä–∏—á–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤, "
        "—è–∫–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—è—Å–Ω—é—î —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."
    )
    user_prompt = f"–û–ø–∏—à–∏ –µ–∑–æ—Ç–µ—Ä–∏—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {user_input}.\n–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, —Ü—ñ–∫–∞–≤–∏–π –æ–ø–∏—Å —ñ–∑ –µ–º–æ–¥–∑—ñ."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤—ñ—Å—É. –î–µ—Ç–∞–ª—ñ: {e}"


# ========== 6. –ü–†–ò–í–Ü–¢–ê–õ–¨–ù–ò–ô –¢–ï–ö–°–¢ –Ü –ú–ï–ù–Æ ==========

WELCOME_TEXT = (
    "–í—ñ—Ç–∞—é —É –º—ñ—Å—Ç–∏—á–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ! ‚ú®\n\n"
    "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ —á–∏—Å–ª–∞, –∑—ñ—Ä–∫–∏, –µ–∑–æ—Ç–µ—Ä–∏–∫—É —Ç–∞ —Ä—ñ–∑–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, "
    "—â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –≥—Ä–∞–Ω—ñ —Å–≤–æ–≥–æ –∂–∏—Ç—Ç—è.\n\n"
    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂—á–µ, "
    "—â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!"
)

async def show_main_menu(update_or_context, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –ø'—è—Ç—å–º–∞ —Ä–æ–∑–¥—ñ–ª–∞–º–∏.
    """
    keyboard = [
        [InlineKeyboardButton("1. –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è üî¢", callback_data="menu_numerology")],
        [InlineKeyboardButton("2. –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è üåå", callback_data="menu_astrology")],
        [InlineKeyboardButton("3. –ï–∑–æ—Ç–µ—Ä–∏–∫–∞ üîÆ", callback_data="menu_esoterics")],
        [InlineKeyboardButton("4. –ú–∞–≥—ñ—è ü™Ñ", callback_data="menu_magic")],
        [InlineKeyboardButton("5. –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ üõ†", callback_data="menu_tools")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ /cancel", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text_main_menu = (
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:\n\n"
        "1. üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è ‚Äì –ß–∏—Å–ª–∞ —Ä–æ–∑–∫–∞–∂—É—Ç—å –ø—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —ñ –º–∞–π–±—É—Ç–Ω—î. ‚ú® \n"
        "2. üåå –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è ‚Äì –ó–Ω–∞–∫–∏ –ó–æ–¥—ñ–∞–∫—É, –≥–æ—Ä–æ—Å–∫–æ–ø–∏ —Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞. üî≠\n"
        "3. üîÆ –ï–∑–æ—Ç–µ—Ä–∏–∫–∞ ‚Äì –Ü–Ω—Ç—É—ó—Ü—ñ—è, –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ —Ç–∞ —Ç–∞—î–º–Ω—ñ –∑–Ω–∞–∫–∏ –¥–æ–ª—ñ. üåÄ \n"
        "4. ü™Ñ –ú–∞–≥—ñ—è ‚Äì –†–∏—Ç—É–∞–ª–∏, –¢–∞—Ä–æ, –∞–º—É–ª–µ—Ç–∏ —Ç–∞ –º–∞–≥—ñ—á–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏. üî•\n"
        "5. üõ† –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ‚Äì –ö–∞—Ä–º–∞, —á–∞—Å —Å–∏–ª–∏, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–∞–∂–∞–Ω—å. ‚öñÔ∏è\n"
        "–Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–≤–µ—Ä—à–∏—Ç–∏ /cancel¬ª."
    )

    if isinstance(update_or_context, Update) and update_or_context.callback_query:
        query = update_or_context.callback_query
        await query.answer()
        await query.edit_message_text(text_main_menu, reply_markup=reply_markup)
    elif isinstance(update_or_context, Update) and update_or_context.message:
        await update_or_context.message.reply_text(text_main_menu, reply_markup=reply_markup)
    else:
        chat_id = update_or_context.effective_chat.id
        await context.bot.send_message(chat_id, text_main_menu, reply_markup=reply_markup)

    return MAIN_MENU

# ========== 7. –û–ë–†–û–ë–ù–ò–ö /START –Ü –ü–û–í–ï–î–Ü–ù–ö–ê –ü–†–ò –ü–ï–†–®–û–ú–£ –í–Ü–ó–ò–¢–Ü ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ /start, –ø–æ–∫–∞–∂–µ–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ –º–µ–Ω—é.
    """
    await update.message.reply_text(WELCOME_TEXT)
    return await show_main_menu(update, context)

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ–π–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤ –±–æ—Ç —ñ –ø–∏—à–µ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ –∫–æ–º–∞–Ω–¥—É).
    –ü—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ‚Äì –ø–æ–∫–∞–∑—É—î–º–æ WELCOME_TEXT,
    –¥–∞–ª—ñ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    if not context.user_data.get("has_seen_welcome", False):
        context.user_data["has_seen_welcome"] = True
        await update.message.reply_text(WELCOME_TEXT)

    return await show_main_menu(update, context)

# ========== 8. –ü–Ü–î–ú–ï–ù–Æ (–ö–û–†–û–¢–ö–û, –í –¢–û–ú–£ –ß–ò–°–õ–Ü –î–õ–Ø –ù–£–ú–ï–†–û–õ–û–ì–Ü–á) ==========

async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu_numerology":
        return await show_numerology_menu(update, context)
    elif data == "menu_astrology":
        return await show_astrology_menu(update, context)
    elif data == "menu_esoterics":
        return await show_esoterics_menu(update, context)
    elif data == "menu_magic":
        return await show_magic_menu(update, context)
    elif data == "menu_tools":
        return await show_tools_menu(update, context)
    elif data == "cancel":
        return await cancel(update, context)

    return MAIN_MENU

# --- –ü—ñ–¥–º–µ–Ω—é: –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è ---
async def show_numerology_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.edit_message_text("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è: –æ–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞—Å–ø–µ–∫—Ç:")
    keyboard = [
    [InlineKeyboardButton("üìú –ê–Ω–∞–ª—ñ–∑ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ ‚Äì –©–æ –∫–∞–∂—É—Ç—å —á–∏—Å–ª–∞ –ø—Ä–æ –≤–∞—Å? üîÆ", callback_data="num_personal")],
    [InlineKeyboardButton("üî¢ –ú–∞—Ç—Ä–∏—Ü—è –ü—ñ—Ñ–∞–≥–æ—Ä–∞ ‚Äì –í–∞—à—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∏—Å–ª–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. üî¢", callback_data="num_pythagoras")],
    [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ–∫—É ‚Äì –©–æ —á–µ–∫–∞—Ç–∏ —É —Ü—å–æ–º—É —Ä–æ—Ü—ñ? üóìÔ∏è", callback_data="num_forecast")],
    [InlineKeyboardButton("üíû –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å ‚Äì –ù–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É? ‚ù§Ô∏è", callback_data="num_compatibility")],
    [InlineKeyboardButton("üîô ¬´–ù–∞–∑–∞–¥¬ª", callback_data="back_main_menu")]
]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return NUMEROLOGY_MENU

async def numerology_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "num_personal":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —ñ–º‚Äô—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15.07.1995 –∞–±–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä):")
        context.user_data["numerology_mode"] = "personal"
        return ENTER_DATA_STATE

    elif data == "num_pythagoras":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ú–∞—Ç—Ä–∏—Ü—ñ –ü—ñ—Ñ–∞–≥–æ—Ä–∞:")
        context.user_data["numerology_mode"] = "pythagoras"
        return ENTER_DATA_STATE

    elif data == "num_forecast":
        await query.edit_message_text("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:")
        context.user_data["numerology_mode"] = "forecast"
        return ENTER_DATA_STATE

    elif data == "num_compatibility":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–≤—ñ –¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (01.01.2000, 02.02.2002):")
        context.user_data["numerology_mode"] = "compatibility"
        return ENTER_DATA_STATE

    elif data == "back_main_menu":
        return await show_main_menu(update, context)

    return NUMEROLOGY_MENU

# --- –ü—ñ–¥–º–µ–Ω—é: –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è ---
async def show_astrology_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.edit_message_text("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è: –æ–±–µ—Ä—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞—Å–ø–µ–∫—Ç:")
    keyboard = [
        [InlineKeyboardButton("üåü –ù–∞—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äì –í–ø–ª–∏–≤ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –≤–∞—à–µ –∂–∏—Ç—Ç—è. üî≠", callback_data="astro_natal")],
        [InlineKeyboardButton("üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–µ–Ω—å ‚Äì –©–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∏ –∑–æ—Ä—ñ —Å—å–æ–≥–æ–¥–Ω—ñ? ‚ú®", callback_data="astro_daily")],
        [InlineKeyboardButton("‚ôå –ó–Ω–∞–∫–∏ –ó–æ–¥—ñ–∞–∫—É ‚Äì –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–≤—ñ–π –∑–Ω–∞–∫. ‚ôà", callback_data="astro_zodiac")],
        [InlineKeyboardButton("üíû –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å ‚Äì –ß–∏ –≤–∏ —ñ–¥–µ–∞–ª—å–Ω–∞ –ø–∞—Ä–∞ –∑–∞ –∑—ñ—Ä–∫–∞–º–∏? üí´", callback_data="astro_compatibility")],
        [InlineKeyboardButton("üîô ¬´–ù–∞–∑–∞–¥¬ª", callback_data="back_main_menu")]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return ASTROLOGY_MENU

async def astrology_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "astro_natal":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É, —á–∞—Å —ñ –º—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Ç–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏ (15.07.1995, 14:30, –ö–∏—ó–≤):")
        context.user_data["astrology_mode"] = "natal"
        return ENTER_DATA_STATE

    elif data == "astro_daily":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–Ω–∞–∫ –ó–æ–¥—ñ–∞–∫—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É (–û–≤–µ–Ω, –†–∞–∫ —ñ —Ç. –¥.):")
        context.user_data["astrology_mode"] = "daily"
        return ENTER_DATA_STATE

    elif data == "astro_zodiac":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–Ω–∞–∫—É:")
        context.user_data["astrology_mode"] = "zodiac"
        return ENTER_DATA_STATE

    elif data == "astro_compatibility":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ –∑–Ω–∞–∫–∏ (–û–≤–µ–Ω, –†–∞–∫) –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ:")
        context.user_data["astrology_mode"] = "compatibility"
        return ENTER_DATA_STATE

    elif data == "back_main_menu":
        return await show_main_menu(update, context)

    return ASTROLOGY_MENU


# --- –ü—ñ–¥–º–µ–Ω—é: –ï–∑–æ—Ç–µ—Ä–∏–∫–∞ ---
async def show_esoterics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.edit_message_text("üîë –ï–∑–æ—Ç–µ—Ä–∏–∫–∞: –æ–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫:")
    keyboard = [
        [InlineKeyboardButton("üåÄ –ï–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –ª—é–¥–∏–Ω–∏ ‚Äì –ì–∞—Ä–º–æ–Ω—ñ—è —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è —Å–∏–ª–∞. ‚ö°", callback_data="eso_energy")],
        [InlineKeyboardButton("üëÅÔ∏è –¢—Ä–µ—Ç—î –æ–∫–æ ‚Äì –†–æ–∑–≤–∏—Ç–æ–∫ —ñ–Ω—Ç—É—ó—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å. üîÆ", callback_data="eso_thirdeye")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ—Ä–æ—Ü—Ç–≤–∞ —Ç–∞ –∑–Ω–∞–∫–∏ ‚Äì –¢–ª—É–º–∞—á–µ–Ω–Ω—è —Å–Ω—ñ–≤ —ñ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–æ–ª—ñ. üåô", callback_data="eso_prophecy")],
        [InlineKeyboardButton("üîô ¬´–ù–∞–∑–∞–¥¬ª", callback_data="back_main_menu")]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return ESOTERICS_MENU

async def esoterics_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "eso_energy":
        await query.edit_message_text("–û–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (–í—ñ–¥—á—É–≤–∞—é –≤—Ç–æ–º—É, –ù–µ–º–∞—î –µ–Ω–µ—Ä–≥—ñ—ó):")
        context.user_data["esoterics_mode"] = "energy"
        return ENTER_DATA_STATE

    elif data == "eso_thirdeye":
        await query.edit_message_text(" –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –¥–æ—Å–≤—ñ–¥ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è (–ß–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ç—Ä–µ—Ç—î –æ–∫–æ?):")
        context.user_data["esoterics_mode"] = "thirdeye"
        return ENTER_DATA_STATE

    elif data == "eso_prophecy":
        await query.edit_message_text("–û–ø–∏—à—ñ—Ç—å –∑–Ω–∞–∫ –∞–±–æ —Å–æ–Ω (–ü—Ä–∏—Å–Ω–∏–≤—Å—è —á–æ—Ä–Ω–∏–π –∫—ñ—Ç, —â–æ —Ü–µ –æ–∑–Ω–∞—á–∞—î?):")
        context.user_data["esoterics_mode"] = "prophecy"
        return ENTER_DATA_STATE

    elif data == "back_main_menu":
        return await show_main_menu(update, context)

    return ESOTERICS_MENU


# --- –ü—ñ–¥–º–µ–Ω—é: –ú–∞–≥—ñ—è ---
async def show_magic_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.edit_message_text("‚ú® –ú–∞–≥—ñ—è: –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:")
    keyboard = [
        [InlineKeyboardButton("üïØÔ∏è –†–∏—Ç—É–∞–ª–∏ ‚Äì –ú–∞–≥—ñ—á–Ω—ñ –æ–±—Ä—è–¥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π. üî•", callback_data="magic_rituals")],
        [InlineKeyboardButton("üîÆ –ú–∞–≥—ñ—á–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ ‚Äì –ê–º—É–ª–µ—Ç–∏, —Ç–∞–ª—ñ—Å–º–∞–Ω–∏ —Ç–∞ —ó—Ö–Ω—ñ —Å–∏–ª–∏. üè∫", callback_data="magic_items")],
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∏ –¢–∞—Ä–æ ‚Äì –û—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è. üé¥", callback_data="magic_tarot")],
        [InlineKeyboardButton("üîô ¬´–ù–∞–∑–∞–¥¬ª", callback_data="back_main_menu")]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return MAGIC_MENU

async def magic_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "magic_rituals":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –º–µ—Ç—É —Ä–∏—Ç—É–∞–ª—É (–ó–∞–ª—É—á–µ–Ω–Ω—è –≥—Ä–æ—à–µ–π, –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ–≥–∞—Ç–∏–≤—É):")
        context.user_data["magic_mode"] = "rituals"
        return ENTER_DATA_STATE

    elif data == "magic_items":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–∞–≥—ñ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ê–º—É–ª–µ—Ç, –°–≤—ñ—á–∫–∞, –¢–∞–ª—ñ—Å–º–∞–Ω):")
        context.user_data["magic_mode"] = "items"
        return ENTER_DATA_STATE

    elif data == "magic_tarot":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞ —è–∫–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–©–æ –º–µ–Ω–µ —á–µ–∫–∞—î –≤ –∫–æ—Ö–∞–Ω–Ω—ñ?):")
        context.user_data["magic_mode"] = "tarot"
        return ENTER_DATA_STATE

    elif data == "back_main_menu":
        return await show_main_menu(update, context)

    return MAGIC_MENU


# --- –ü—ñ–¥–º–µ–Ω—é: –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ---
async def show_tools_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.edit_message_text("üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:")
    keyboard = [
        [InlineKeyboardButton("üï∞Ô∏è –ß–∞—Å —Å–∏–ª–∏ ‚Äì –ù–∞–π–∫—Ä–∞—â—ñ –º–æ–º–µ–Ω—Ç–∏ –¥–ª—è –¥—ñ–π. ‚è≥", callback_data="tools_power_time")],
        [InlineKeyboardButton("üìú –ú–∞–Ω—ñ—Ñ–µ—Å—Ç–∞—Ü—ñ—è –±–∞–∂–∞–Ω—å ‚Äì –Ø–∫ –≤—Ç—ñ–ª–∏—Ç–∏ –º—Ä—ñ—é —É —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å? üí´", callback_data="tools_manifestation")],
        [InlineKeyboardButton("‚öñÔ∏è –ö–∞—Ä–º—ñ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å ‚Äì –ê–Ω–∞–ª—ñ–∑ –∫–∞—Ä–º–∏ —Ç–∞ —ó—ó –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è. üåø", callback_data="tools_karma")],
        [InlineKeyboardButton("üîô ¬´–ù–∞–∑–∞–¥¬ª", callback_data="back_main_menu")]
    ]

    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    return TOOLS_MENU

async def tools_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "tools_power_time":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —á–∞—Å—É —Å–∏–ª–∏:")
        context.user_data["tools_mode"] = "power_time"
        return ENTER_DATA_STATE

    elif data == "tools_manifestation":
        await query.edit_message_text("–û–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–Ω—è (–•–æ—á—É –∑–Ω–∞–π—Ç–∏ –∫–æ—Ö–∞–Ω–Ω—è, –ü—Ä–∞–≥–Ω—É —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—Å–ø—ñ—Ö—É):")
        context.user_data["tools_mode"] = "manifestation"
        return ENTER_DATA_STATE

    elif data == "tools_karma":
        await query.edit_message_text("–û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É (–ß–æ–º—É –º–µ–Ω—ñ –Ω–µ —â–∞—Å—Ç–∏—Ç—å —É —Å—Ç–æ—Å—É–Ω–∫–∞—Ö?):")
        context.user_data["tools_mode"] = "karma"
        return ENTER_DATA_STATE

    elif data == "back_main_menu":
        return await show_main_menu(update, context)

    return TOOLS_MENU

# ========== 9. –û–ë–†–û–ë–ö–ê –í–í–ï–î–ï–ù–ò–• –î–ê–ù–ò–• (ENTER_DATA_STATE) ==========

async def handle_entered_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()

    # --- –ù—É–º–µ—Ä–æ–ª–æ–≥—ñ—è ---
    if "numerology_mode" in context.user_data:
        mode = context.user_data.pop("numerology_mode")
        result = await handle_numerology_data(user_input)
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
        await update.message.reply_text(result)
        return await show_main_menu(update, context)

    # --- –ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—è ---
    if "astrology_mode" in context.user_data:
        mode = context.user_data.pop("astrology_mode")
        result = await handle_astrology_data(user_input)
        await update.message.reply_text(result)
        return await show_main_menu(update, context)

    # --- –ï–∑–æ—Ç–µ—Ä–∏–∫–∞ ---
    if "esoterics_mode" in context.user_data:
        mode = context.user_data.pop("esoterics_mode")
        result = await handle_esoterics_data(user_input)
        await update.message.reply_text(result)
        return await show_main_menu(update, context)

    # --- –ú–∞–≥—ñ—è ---
    if "magic_mode" in context.user_data:
        mode = context.user_data.pop("magic_mode")
        result = await handle_magic_data(user_input)
        await update.message.reply_text(result)
        return await show_main_menu(update, context)

    # --- –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ---
    if "tools_mode" in context.user_data:
        mode = context.user_data.pop("tools_mode")
        result = await handle_tools_data(user_input)
        await update.message.reply_text(result)
        return await show_main_menu(update, context)

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:
    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç. –ü–æ–≤–µ—Ä—Ç–∞—é –≤–∞—Å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
    return await show_main_menu(update, context)

# ========== 10. –ö–û–ú–ê–ù–î–ê /CANCEL ==========
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º."""
    if update.callback_query:
        await update.callback_query.edit_message_text("–î—è–∫—É—î–º–æ, —â–æ –∑–∞–≤—ñ—Ç–∞–ª–∏! –ù–µ—Ö–∞–π —â–∞—Å—Ç–∏—Ç—å üåü")
    else:
        await update.message.reply_text("–î—è–∫—É—î–º–æ, —â–æ –∑–∞–≤—ñ—Ç–∞–ª–∏! –ù–µ—Ö–∞–π —â–∞—Å—Ç–∏—Ç—å üåü")
    return ConversationHandler.END

# ========== 11. –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–∞–ø—É—Å–∫—É –ë–æ—Ç–∞ ==========
def main() -> None:
    # –°—Ç–≤–æ—Ä—é—î–º–æ Application (–∞–Ω–∞–ª–æ–≥ Updater —É –≤–µ—Ä—Å—ñ—è—Ö 20+)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            # –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥—É) ‚Äî handle_any_message
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_message),
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å /start
            CommandHandler("start", start_command)
        ],
        states={

        MAIN_MENU: [
            CallbackQueryHandler(main_menu_callback),
        ],
        NUMEROLOGY_MENU: [
            CallbackQueryHandler(numerology_menu_callback),
        ],
        ASTROLOGY_MENU: [  
            CallbackQueryHandler(astrology_menu_callback),
        ],
        ESOTERICS_MENU: [  
            CallbackQueryHandler(esoterics_menu_callback),
        ],
        MAGIC_MENU: [ 
            CallbackQueryHandler(magic_menu_callback),
        ],
        TOOLS_MENU: [  
            CallbackQueryHandler(tools_menu_callback),
        ],
        ENTER_DATA_STATE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_entered_data),
        ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="^cancel$")
        ],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
